@page "/publicVideos"
@page "/publicVideos/{_page:int}"
@page "/publicVideos/{_page:int}/{max:int}"
@inject HttpClient Http
@inject NavigationManager navigationManager

<h3>PublicVideos</h3>
<section>
  <article>
    @if (publicVideos.Count > 0)
    {
      @foreach (var item in publicVideos)
      {
        <div>@item.Order &nbsp;</div>
        <div><img src="@item.ThumbnailDefault" style="max-width:15%;" /></div>
        <a href="/watch/@item.VideoId"><div>@item.Title</div></a>
        <div>@item.CreatedAt</div>
        <br />
      }
    }

  </article>
</section>
<section>
  <Pagination CurrentPage="_page" Radius="10" TotalAmountPages="pageCount" SelectedPage="SelectedPage"/>
</section>

@code {
  public List<VideoDTO> publicVideos { get; set; } = new List<VideoDTO>();
  public string videoId { get; set; } = null;
  private string _filter { get; set; }
  [Parameter] public int _page { get; set; } = 1;
  [Parameter] public int max { get; set; } = 200;
  public int totalCount { get; set; }
  public int pageCount { get; set; } = 1;
  protected async override Task OnInitializedAsync()
  {
    if (max < 1)
    {
      max = 200;
    }
    if (_page < 1)
    {
      _page = 1;
    }
    await FetchDataAsync(_page, max);
    StateHasChanged();
  }
  public async Task FetchDataAsync(int page=1, int max=200)
  {
    var response = await Http.GetFromJsonAsync<ResponseDTO<List<VideoDTO>>>($"api/PublicVideos?page={page}&max={max}");
    publicVideos = response.data;
    totalCount = (int)response.totalData;
    pageCount =(int) Math.Ceiling((decimal)totalCount / (decimal)max);
    StateHasChanged();
  }
  public async Task SelectedPage(int page=1)
  {
    _page = page;
    await FetchDataAsync(_page, max);
    StateHasChanged();
    navigationManager.NavigateTo($"/publicVideos/{_page}");
  }

}
